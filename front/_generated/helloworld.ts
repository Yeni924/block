/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.17.3
 * source: helloworld.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class HelloRequest extends pb_1.Message {
    constructor(data?: any[] | {
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get name() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    toObject() {
        const data: {
            name?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(1, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HelloRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HelloRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HelloRequest {
        return HelloRequest.deserialize(bytes);
    }
}
export class HelloReply extends pb_1.Message {
    constructor(data?: any[] | {
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get message() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    toObject() {
        const data: {
            message?: string;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.message === "string" && this.message.length)
            writer.writeString(1, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HelloReply {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HelloReply();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HelloReply {
        return HelloReply.deserialize(bytes);
    }
}
export class AddRequest extends pb_1.Message {
    constructor(data?: any[] | {
        numOne?: number;
        numTwo?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("numOne" in data && data.numOne != undefined) {
                this.numOne = data.numOne;
            }
            if ("numTwo" in data && data.numTwo != undefined) {
                this.numTwo = data.numTwo;
            }
        }
    }
    get numOne() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set numOne(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get numTwo() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set numTwo(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    toObject() {
        const data: {
            numOne?: number;
            numTwo?: number;
        } = {};
        if (this.numOne != null) {
            data.numOne = this.numOne;
        }
        if (this.numTwo != null) {
            data.numTwo = this.numTwo;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.numOne !== undefined)
            writer.writeInt32(1, this.numOne);
        if (this.numTwo !== undefined)
            writer.writeInt32(2, this.numTwo);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.numOne = reader.readInt32();
                    break;
                case 2:
                    message.numTwo = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AddRequest {
        return AddRequest.deserialize(bytes);
    }
}
export class AddReply extends pb_1.Message {
    constructor(data?: any[] | {
        result?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("result" in data && data.result != undefined) {
                this.result = data.result;
            }
        }
    }
    get result() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set result(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    toObject() {
        const data: {
            result?: number;
        } = {};
        if (this.result != null) {
            data.result = this.result;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.result !== undefined)
            writer.writeInt32(1, this.result);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddReply {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddReply();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.result = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AddReply {
        return AddReply.deserialize(bytes);
    }
}
export class MultiplyRequest extends pb_1.Message {
    constructor(data?: any[] | {
        numOne?: number;
        numTwo?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("numOne" in data && data.numOne != undefined) {
                this.numOne = data.numOne;
            }
            if ("numTwo" in data && data.numTwo != undefined) {
                this.numTwo = data.numTwo;
            }
        }
    }
    get numOne() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set numOne(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get numTwo() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set numTwo(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    toObject() {
        const data: {
            numOne?: number;
            numTwo?: number;
        } = {};
        if (this.numOne != null) {
            data.numOne = this.numOne;
        }
        if (this.numTwo != null) {
            data.numTwo = this.numTwo;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.numOne !== undefined)
            writer.writeInt32(1, this.numOne);
        if (this.numTwo !== undefined)
            writer.writeInt32(2, this.numTwo);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultiplyRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultiplyRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.numOne = reader.readInt32();
                    break;
                case 2:
                    message.numTwo = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MultiplyRequest {
        return MultiplyRequest.deserialize(bytes);
    }
}
export class MultiplyResponse extends pb_1.Message {
    constructor(data?: any[] | {
        result?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("result" in data && data.result != undefined) {
                this.result = data.result;
            }
        }
    }
    get result() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set result(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    toObject() {
        const data: {
            result?: number;
        } = {};
        if (this.result != null) {
            data.result = this.result;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.result !== undefined)
            writer.writeInt32(1, this.result);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultiplyResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultiplyResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.result = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MultiplyResponse {
        return MultiplyResponse.deserialize(bytes);
    }
}
export abstract class UnimplementedGreeterService {
    static definition = {
        SayHello: {
            path: "/Greeter/SayHello",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: HelloRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => HelloRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: HelloReply) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => HelloReply.deserialize(new Uint8Array(bytes))
        },
        AddTwoNumber: {
            path: "/Greeter/AddTwoNumber",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AddRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AddRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AddReply) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AddReply.deserialize(new Uint8Array(bytes))
        },
        Multiply: {
            path: "/Greeter/Multiply",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: MultiplyRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => MultiplyRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: MultiplyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => MultiplyResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract SayHello(call: grpc_1.ServerUnaryCall<HelloRequest, HelloReply>, callback: grpc_1.requestCallback<HelloReply>): void;
    abstract AddTwoNumber(call: grpc_1.ServerUnaryCall<AddRequest, AddReply>, callback: grpc_1.requestCallback<AddReply>): void;
    abstract Multiply(call: grpc_1.ServerUnaryCall<MultiplyRequest, MultiplyResponse>, callback: grpc_1.requestCallback<MultiplyResponse>): void;
}
export class GreeterClient extends grpc_1.makeGenericClientConstructor(UnimplementedGreeterService.definition, "Greeter", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options)
    }
    SayHello(message: HelloRequest, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<HelloReply>): grpc_1.ClientUnaryCall;
    SayHello(message: HelloRequest, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<HelloReply>): grpc_1.ClientUnaryCall;
    SayHello(message: HelloRequest, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<HelloReply>): grpc_1.ClientUnaryCall;
    SayHello(message: HelloRequest, callback: grpc_1.requestCallback<HelloReply>): grpc_1.ClientUnaryCall;
    SayHello(message: HelloRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<HelloReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<HelloReply>, callback?: grpc_1.requestCallback<HelloReply>): grpc_1.ClientUnaryCall {
        return super.SayHello(message, metadata, options, callback);
    }
    AddTwoNumber(message: AddRequest, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<AddReply>): grpc_1.ClientUnaryCall;
    AddTwoNumber(message: AddRequest, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<AddReply>): grpc_1.ClientUnaryCall;
    AddTwoNumber(message: AddRequest, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<AddReply>): grpc_1.ClientUnaryCall;
    AddTwoNumber(message: AddRequest, callback: grpc_1.requestCallback<AddReply>): grpc_1.ClientUnaryCall;
    AddTwoNumber(message: AddRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AddReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AddReply>, callback?: grpc_1.requestCallback<AddReply>): grpc_1.ClientUnaryCall {
        return super.AddTwoNumber(message, metadata, options, callback);
    }
    Multiply(message: MultiplyRequest, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<MultiplyResponse>): grpc_1.ClientUnaryCall;
    Multiply(message: MultiplyRequest, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<MultiplyResponse>): grpc_1.ClientUnaryCall;
    Multiply(message: MultiplyRequest, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<MultiplyResponse>): grpc_1.ClientUnaryCall;
    Multiply(message: MultiplyRequest, callback: grpc_1.requestCallback<MultiplyResponse>): grpc_1.ClientUnaryCall;
    Multiply(message: MultiplyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MultiplyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MultiplyResponse>, callback?: grpc_1.requestCallback<MultiplyResponse>): grpc_1.ClientUnaryCall {
        return super.Multiply(message, metadata, options, callback);
    }
}
