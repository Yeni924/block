/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.17.3
 * source: UserService.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class SignInRequest extends pb_1.Message {
    constructor(data?: any[] | {
        email?: string;
        password?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
        }
    }
    get email() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    toObject() {
        const data: {
            email?: string;
            password?: string;
        } = {};
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.email === "string" && this.email.length)
            writer.writeString(1, this.email);
        if (typeof this.password === "string" && this.password.length)
            writer.writeString(2, this.password);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignInRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignInRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.email = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SignInRequest {
        return SignInRequest.deserialize(bytes);
    }
}
export class SignInResponse extends pb_1.Message {
    constructor(data?: any[] | {
        status?: SignInResponse.SignInStatus;
        nickname?: string;
        profileUrl?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("profileUrl" in data && data.profileUrl != undefined) {
                this.profileUrl = data.profileUrl;
            }
        }
    }
    get status() {
        return pb_1.Message.getField(this, 1) as SignInResponse.SignInStatus;
    }
    set status(value: SignInResponse.SignInStatus) {
        pb_1.Message.setField(this, 1, value);
    }
    get nickname() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get profileUrl() {
        return pb_1.Message.getField(this, 3) as string;
    }
    set profileUrl(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    toObject() {
        const data: {
            status?: SignInResponse.SignInStatus;
            nickname?: string;
            profileUrl?: string;
        } = {};
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.profileUrl != null) {
            data.profileUrl = this.profileUrl;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.status !== undefined)
            writer.writeEnum(1, this.status);
        if (typeof this.nickname === "string" && this.nickname.length)
            writer.writeString(2, this.nickname);
        if (typeof this.profileUrl === "string" && this.profileUrl.length)
            writer.writeString(3, this.profileUrl);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignInResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignInResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.status = reader.readEnum();
                    break;
                case 2:
                    message.nickname = reader.readString();
                    break;
                case 3:
                    message.profileUrl = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SignInResponse {
        return SignInResponse.deserialize(bytes);
    }
}
export namespace SignInResponse {
    export enum SignInStatus {
        SUCCESS = 0,
        NO_ACCOUNT = 1,
        WRONG_PASSWORD = 2,
        INTERNAL_ERROR = 3
    }
}
export class SignUpRequest extends pb_1.Message {
    constructor(data?: any[] | {
        email?: string;
        password?: string;
        nickname?: string;
        gender?: SignUpRequest.Gender;
        avatar?: string;
        birthday?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("gender" in data && data.gender != undefined) {
                this.gender = data.gender;
            }
            if ("avatar" in data && data.avatar != undefined) {
                this.avatar = data.avatar;
            }
            if ("birthday" in data && data.birthday != undefined) {
                this.birthday = data.birthday;
            }
        }
    }
    get email() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get nickname() {
        return pb_1.Message.getField(this, 3) as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get gender() {
        return pb_1.Message.getField(this, 4) as SignUpRequest.Gender;
    }
    set gender(value: SignUpRequest.Gender) {
        pb_1.Message.setField(this, 4, value);
    }
    get avatar() {
        return pb_1.Message.getField(this, 5) as string;
    }
    set avatar(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get birthday() {
        return pb_1.Message.getField(this, 6) as string;
    }
    set birthday(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    toObject() {
        const data: {
            email?: string;
            password?: string;
            nickname?: string;
            gender?: SignUpRequest.Gender;
            avatar?: string;
            birthday?: string;
        } = {};
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.gender != null) {
            data.gender = this.gender;
        }
        if (this.avatar != null) {
            data.avatar = this.avatar;
        }
        if (this.birthday != null) {
            data.birthday = this.birthday;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.email === "string" && this.email.length)
            writer.writeString(1, this.email);
        if (typeof this.password === "string" && this.password.length)
            writer.writeString(2, this.password);
        if (typeof this.nickname === "string" && this.nickname.length)
            writer.writeString(3, this.nickname);
        if (this.gender !== undefined)
            writer.writeEnum(4, this.gender);
        if (typeof this.avatar === "string" && this.avatar.length)
            writer.writeString(5, this.avatar);
        if (typeof this.birthday === "string" && this.birthday.length)
            writer.writeString(6, this.birthday);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignUpRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignUpRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.email = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                case 3:
                    message.nickname = reader.readString();
                    break;
                case 4:
                    message.gender = reader.readEnum();
                    break;
                case 5:
                    message.avatar = reader.readString();
                    break;
                case 6:
                    message.birthday = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SignUpRequest {
        return SignUpRequest.deserialize(bytes);
    }
}
export namespace SignUpRequest {
    export enum Gender {
        MALE = 0,
        FEMALE = 1
    }
}
export class SignUpResponse extends pb_1.Message {
    constructor(data?: any[] | {
        status?: SignUpResponse.SignUpStatus;
        nickname?: string;
        profileUrl?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("profileUrl" in data && data.profileUrl != undefined) {
                this.profileUrl = data.profileUrl;
            }
        }
    }
    get status() {
        return pb_1.Message.getField(this, 1) as SignUpResponse.SignUpStatus;
    }
    set status(value: SignUpResponse.SignUpStatus) {
        pb_1.Message.setField(this, 1, value);
    }
    get nickname() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get profileUrl() {
        return pb_1.Message.getField(this, 3) as string;
    }
    set profileUrl(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    toObject() {
        const data: {
            status?: SignUpResponse.SignUpStatus;
            nickname?: string;
            profileUrl?: string;
        } = {};
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.profileUrl != null) {
            data.profileUrl = this.profileUrl;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.status !== undefined)
            writer.writeEnum(1, this.status);
        if (typeof this.nickname === "string" && this.nickname.length)
            writer.writeString(2, this.nickname);
        if (typeof this.profileUrl === "string" && this.profileUrl.length)
            writer.writeString(3, this.profileUrl);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignUpResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignUpResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.status = reader.readEnum();
                    break;
                case 2:
                    message.nickname = reader.readString();
                    break;
                case 3:
                    message.profileUrl = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SignUpResponse {
        return SignUpResponse.deserialize(bytes);
    }
}
export namespace SignUpResponse {
    export enum SignUpStatus {
        SUCCESS = 0,
        ACCOUNT_EXISTS = 1,
        INVALID_INPUT = 2,
        INTERNAL_ERROR = 3
    }
}
export abstract class UnimplementedUserServiceService {
    static definition = {
        SignIn: {
            path: "/UserService/SignIn",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SignInRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SignInRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: SignInResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => SignInResponse.deserialize(new Uint8Array(bytes))
        },
        SignUp: {
            path: "/UserService/SignUp",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SignUpRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SignUpRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: SignUpResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => SignUpResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract SignIn(call: grpc_1.ServerUnaryCall<SignInRequest, SignInResponse>, callback: grpc_1.requestCallback<SignInResponse>): void;
    abstract SignUp(call: grpc_1.ServerUnaryCall<SignUpRequest, SignUpResponse>, callback: grpc_1.requestCallback<SignUpResponse>): void;
}
export class UserServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedUserServiceService.definition, "UserService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options)
    }
    SignIn(message: SignInRequest, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<SignInResponse>): grpc_1.ClientUnaryCall;
    SignIn(message: SignInRequest, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<SignInResponse>): grpc_1.ClientUnaryCall;
    SignIn(message: SignInRequest, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<SignInResponse>): grpc_1.ClientUnaryCall;
    SignIn(message: SignInRequest, callback: grpc_1.requestCallback<SignInResponse>): grpc_1.ClientUnaryCall;
    SignIn(message: SignInRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SignInResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SignInResponse>, callback?: grpc_1.requestCallback<SignInResponse>): grpc_1.ClientUnaryCall {
        return super.SignIn(message, metadata, options, callback);
    }
    SignUp(message: SignUpRequest, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<SignUpResponse>): grpc_1.ClientUnaryCall;
    SignUp(message: SignUpRequest, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<SignUpResponse>): grpc_1.ClientUnaryCall;
    SignUp(message: SignUpRequest, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<SignUpResponse>): grpc_1.ClientUnaryCall;
    SignUp(message: SignUpRequest, callback: grpc_1.requestCallback<SignUpResponse>): grpc_1.ClientUnaryCall;
    SignUp(message: SignUpRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SignUpResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SignUpResponse>, callback?: grpc_1.requestCallback<SignUpResponse>): grpc_1.ClientUnaryCall {
        return super.SignUp(message, metadata, options, callback);
    }
}
